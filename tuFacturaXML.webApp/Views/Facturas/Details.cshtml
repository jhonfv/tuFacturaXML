@using tuFactura.utilitarios.Modelos.DIAN;
@using tuFactura.utilitarios.Modelos.Factura;

@model ResultadoProcesamiento

@{
    // Función helper para obtener el SKU de un producto
    string GetSku(tuFactura.utilitarios.Modelos.DIAN.InvoiceLineType producto)
    {
        return producto.Item?.SellersItemIdentification?.ID?.Value ?? 
               producto.Item?.StandardItemIdentification?.ID?.Value ?? "";
    }
    
    // Función helper para verificar si un SKU existe en la base de datos
    bool SkuExisteEnBD(string sku)
    {
        var validaciones = ViewBag.ValidacionesProductos as List<tuFactura.utilitarios.Modelos.Factura.ValidacionProducto>;
        if (validaciones != null)
        {
            return validaciones.Any(v => v.SKU == sku && v.ExisteEnBaseDeDatos);
        }
        return true; // Si no hay validaciones, asumir que existe
    }
    
    // Función helper para obtener la información del producto de la BD
    tuFactura.utilitarios.Modelos.Factura.ValidacionProducto? ObtenerInfoProductoBD(string sku)
    {
        var validaciones = ViewBag.ValidacionesProductos as List<tuFactura.utilitarios.Modelos.Factura.ValidacionProducto>;
        if (validaciones != null)
        {
            return validaciones.FirstOrDefault(v => v.SKU == sku);
        }
        return null;
    }
}

@{
    ViewData["Title"] = "Detalles de Facturas de Proveedores";
}

<!-- Anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()

<div class="container py-4">
    @if(Model is null){
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body text-center">
                        <div class="upload-icon">
                            <i class="fas fa-exclamation-triangle text-warning"></i>
                        </div>
                        <h3 class="mb-3">No hay facturas de proveedores para mostrar</h3>
                        <a href="/" class="btn btn-primary">
                            <i class="fas fa-arrow-left me-2"></i>
                            Volver
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-3">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-file-invoice-dollar me-2"></i>
                        Facturas de Proveedores Procesadas
                    </h5>
                    <div class="d-flex gap-2">
                        <span class="badge badge-success">
                            @Model.Facturas.Count factura(s) de proveedor(es)
                        </span>
                        @if(Model.ArchivosAdjuntos != null && Model.ArchivosAdjuntos.Any())
                        {
                            <span class="badge badge-secondary">
                                @Model.ArchivosAdjuntos.Count archivo(s) adjunto(s)
                            </span>
                        }
                        <a href="/" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-arrow-left me-1"></i>
                            Volver
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Archivos Adjuntos -->
        @if(Model.ArchivosAdjuntos != null && Model.ArchivosAdjuntos.Any())
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-paperclip me-2"></i>
                                Archivos Adjuntos
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                @foreach(var (archivo, index) in Model.ArchivosAdjuntos.Select((a, i) => (a, i)))
                                {
                                    <div class="col-md-4 mb-3">
                                        <div class="card h-100">
                                            <div class="card-body text-center">
                                                <div class="upload-icon mb-2">
                                                    @if(archivo.Extension == ".pdf")
                                                    {
                                                        <i class="fas fa-file-pdf text-danger"></i>
                                                    }
                                                    else if(archivo.Extension == ".jpg" || archivo.Extension == ".jpeg" || archivo.Extension == ".png")
                                                    {
                                                        <i class="fas fa-file-image text-primary"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-file text-secondary"></i>
                                                    }
                                                </div>
                                                <h6 class="card-title">@archivo.Nombre</h6>
                                                <p class="card-text">
                                                    <small class="text-muted">
                                                        @(archivo.Tamaño / 1024) KB
                                                    </small>
                                                </p>
                                                <div class="btn-group-vertical w-100" role="group">
                                                    <button class="btn btn-primary btn-sm mb-1" onclick="visualizarEnModal(@index, '@archivo.Nombre')">
                                                        <i class="fas fa-eye me-1"></i>
                                                        Ver en Modal
                                                    </button>
                                                    <button class="btn btn-outline-primary btn-sm" onclick="visualizarEnNuevaPestana(@index)">
                                                        <i class="fas fa-external-link-alt me-1"></i>
                                                        Nueva Pestaña
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Detalles de Facturas -->
        @for(int facturaIndex = 0; facturaIndex < Model.Facturas.Count; facturaIndex++)
        {
            var factura = Model.Facturas[facturaIndex];
            var facturaId = factura.ID.Value.Replace(" ", "").Replace("-", "");
            
            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">
                                    <i class="fas fa-file-invoice me-2"></i>
                                    Factura #@(facturaIndex + 1)
                                </h5>
                                <div class="d-flex gap-2 justify-content-end">
                                    <span class="badge badge-success">Procesada</span>
                                    <button type="button" class="btn btn-info btn-sm" onclick="validarProductos(@facturaIndex, '@facturaId')">
                                        <i class="fas fa-search me-1"></i>
                                        Validar Productos
                                    </button>
                                    <form method="post" action="@Url.Action("ProcesarEntradaMercancia", "Facturas")" style="display: inline;">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="facturaIndex" value="@facturaIndex" />
                                        <button type="submit" class="btn btn-success btn-sm" onclick="return confirm('¿Desea procesar esta factura como entrada de mercancía?')">
                                            <i class="fas fa-truck me-1"></i>
                                            Procesar Entrada
                                        </button>
                                    </form>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <!-- Key Information -->
                                <div class="col-md-4">
                                    <div class="invoice-section">
                                        <div class="section-title">Información General</div>
                                                                                 <div class="data-row">
                                             <span class="data-label">CUFE:</span>
                                             <span class="data-value" style="word-break: break-all; font-family: monospace; font-size: 0.875rem;">@factura.UUID.Value</span>
                                         </div>
                                        <div class="data-row">
                                            <span class="data-label">Documento:</span>
                                            <span class="data-value">@factura.ID.Value</span>
                                        </div>
                                        <div class="data-row">
                                            <span class="data-label">Fecha:</span>
                                            <span class="data-value">@factura.IssueDate.Value.ToString("dd/MM/yyyy")</span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Supplier Information -->
                                <div class="col-md-4">
                                    <div class="invoice-section">
                                        <div class="section-title">Información del Proveedor (Vendedor)</div>
                                        <div class="data-row">
                                            <span class="data-label">Nombre:</span>
                                            <span class="data-value">@factura.AccountingSupplierParty.Party.PartyName[0].Name.Value</span>
                                        </div>
                                        <div class="data-row">
                                            <span class="data-label">NIT/RUT:</span>
                                            <span class="data-value">
                                                @if (factura.AccountingSupplierParty.Party.PartyTaxScheme != null && factura.AccountingSupplierParty.Party.PartyTaxScheme.Any())
                                                {
                                                    @factura.AccountingSupplierParty.Party.PartyTaxScheme[0].CompanyID.Value
                                                }
                                            </span>
                                        </div>
                                        <div class="data-row">
                                            <span class="data-label">Dirección:</span>
                                            <span class="data-value">
                                                @if (factura.AccountingSupplierParty.Party.PostalAddress != null)
                                                {
                                                    @factura.AccountingSupplierParty.Party.PostalAddress.StreetName.Value
                                                }
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Customer Information -->
                                <div class="col-md-4">
                                    <div class="invoice-section">
                                        <div class="section-title">Información del Cliente (Comprador)</div>
                                        <div class="data-row">
                                            <span class="data-label">Nombre:</span>
                                            <span class="data-value">@factura.AccountingCustomerParty.Party.PartyName[0].Name.Value</span>
                                        </div>
                                        <div class="data-row">
                                            <span class="data-label">NIT/RUT:</span>
                                            <span class="data-value">
                                                @if (factura.AccountingCustomerParty.Party.PartyTaxScheme != null && factura.AccountingCustomerParty.Party.PartyTaxScheme.Any())
                                                {
                                                    @factura.AccountingCustomerParty.Party.PartyTaxScheme[0].CompanyID.Value
                                                }
                                            </span>
                                        </div>
                                        <div class="data-row">
                                            <span class="data-label">Dirección:</span>
                                            <span class="data-value">
                                                @if (factura.AccountingCustomerParty.Party.PostalAddress != null)
                                                {
                                                    @factura.AccountingCustomerParty.Party.PostalAddress.StreetName.Value
                                                }
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Products Table -->
                            <div class="row mt-4">
                                <div class="col-12">
                                    <div class="card">
                                        <div class="card-header">
                                            <h6 class="mb-0">
                                                <i class="fas fa-boxes me-2"></i>
                                                Productos de la Factura
                                            </h6>
                                        </div>
                                        <div class="card-body p-0">
                                                                                         <div class="table-responsive">
                                                 <table id="productsCollapse@(facturaId)" class="table table-sm table-hover mb-0">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th class="text-center" style="width: 4%;">#</th>
                                                            <th style="width: 12%;">SKU</th>
                                                            <th style="width: 25%;">Descripción</th>
                                                            <th class="text-center" style="width: 7%;">Cantidad</th>
                                                            <th class="text-center" style="width: 7%;">Unidad</th>
                                                            <th class="text-end" style="width: 9%;">Precio Unit.</th>
                                                            <th class="text-end" style="width: 7%;">Descuento</th>
                                                            <th class="text-center" style="width: 7%;">% IVA</th>
                                                            <th class="text-end" style="width: 9%;">Valor con IVA</th>
                                                            <th style="width: 10%;">Otros Impuestos</th>
                                                            <th class="text-end" style="width: 7%;">Total</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @for(int productoIndex = 0; productoIndex < factura.InvoiceLine.Length; productoIndex++)
                                                        {
                                                            var producto = factura.InvoiceLine[productoIndex];
                                                            var sku = GetSku(producto);
                                                            var existeEnBD = SkuExisteEnBD(sku);
                                                            var infoProductoBD = ObtenerInfoProductoBD(sku);
                                                            var rowClass = existeEnBD ? "" : "table-danger";
                                                            var inputClass = existeEnBD ? "form-control form-control-sm sku-input" : "form-control form-control-sm sku-input border-danger text-danger";
                                                            
                                                            <tr class="@rowClass">
                                                                <td class="text-center">@(productoIndex + 1)</td>
                                                                <td>
                                                                    <input type="text" 
                                                                           class="@inputClass" 
                                                                           value="@sku"
                                                                           data-original-sku="@sku"
                                                                           placeholder="SKU del producto"
                                                                           style="font-family: monospace; font-size: 0.875rem; min-width: 80px; max-width: 120px;"
                                                                           title="@(existeEnBD ? "Producto encontrado en base de datos" : "Producto NO encontrado en base de datos")">
                                                                    <small class="@(existeEnBD ? "text-muted" : "text-danger") d-block mt-1">
                                                                        @if(!existeEnBD)
                                                                        {
                                                                            @:No encontrado en BD
                                                                        }
                                                                    </small>
                                                                </td>
                                                                <td>
                                                                    <div>
                                                                        @producto.Item.Description[0].Value
                                                                        @if(infoProductoBD != null && infoProductoBD.ExisteEnBaseDeDatos && !string.IsNullOrEmpty(infoProductoBD.DescripcionProducto))
                                                                        {
                                                                            <div class="producto-bd-info">
                                                                                <small class="text-success d-block mt-1">
                                                                                    <i class="fas fa-database me-1"></i>
                                                                                    <strong>BD:</strong> @infoProductoBD.DescripcionProducto
                                                                                </small>
                                                                            </div>
                                                                        }
                                                                    </div>
                                                                </td>
                                                                <td class="text-center">
                                                                    @producto.InvoicedQuantity.Value.ToString("N2")
                                                                    <small class="text-muted d-block">@producto.InvoicedQuantity.unitCode</small>
                                                                </td>
                                                                                                                                 <td class="text-center">
                                                                     @producto.InvoicedQuantity.unitCode
                                                                 </td>
                                                                <td class="text-end">
                                                                    @if(producto.Price.PriceAmount != null)
                                                                    {
                                                                        <strong>$@producto.Price.PriceAmount.Value.ToString("N2")</strong>
                                                                        <small class="text-muted">@producto.Price.PriceAmount.currencyID</small>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="text-muted">-</span>
                                                                    }
                                                                </td>
                                                                <td class="text-end">
                                                                    <input type="text" 
                                                                           class="form-control form-control-sm discount-input" 
                                                                           value="0"
                                                                           placeholder="0.00"
                                                                           style="font-family: monospace; font-size: 0.875rem; min-width: 60px; max-width: 80px;"
                                                                           data-original-value="0">
                                                                </td>
                                                                <td class="text-center">
                                                                    @{
                                                                        var ivaPorcentaje = 0m;
                                                                        if(producto.TaxTotal != null && producto.TaxTotal.Any())
                                                                        {
                                                                            var ivaTax = producto.TaxTotal.FirstOrDefault(t => t.TaxSubtotal.Any(st => st.TaxCategory.TaxScheme.ID.Value == "01" || st.TaxCategory.TaxScheme.ID.Value == "02"));
                                                                            if(ivaTax != null)
                                                                            {
                                                                                var ivaSubtotal = ivaTax.TaxSubtotal.FirstOrDefault(st => st.TaxCategory.TaxScheme.ID.Value == "01" || st.TaxCategory.TaxScheme.ID.Value == "02");
                                                                                if(ivaSubtotal != null && ivaSubtotal.Percent != null)
                                                                                {
                                                                                    ivaPorcentaje = ivaSubtotal.Percent.Value;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                                                                                         @ivaPorcentaje.ToString("N0")%
                                                                 </td>
                                                                 <td class="text-end">
                                                                     @{
                                                                         decimal valorConIva = 0;
                                                                         string monedaValorConIva = "";
                                                                         
                                                                         // Base: LineExtensionAmount (sin impuestos)
                                                                         if(producto.LineExtensionAmount != null)
                                                                         {
                                                                             valorConIva += producto.LineExtensionAmount.Value;
                                                                             monedaValorConIva = producto.LineExtensionAmount.currencyID;
                                                                         }
                                                                         
                                                                         // Sumar IVA específicamente
                                                                         if(producto.TaxTotal != null && producto.TaxTotal.Any())
                                                                         {
                                                                             var ivaTax = producto.TaxTotal.FirstOrDefault(t => t.TaxSubtotal.Any(st => st.TaxCategory.TaxScheme.ID.Value == "01" || st.TaxCategory.TaxScheme.ID.Value == "02"));
                                                                             if(ivaTax != null)
                                                                             {
                                                                                 var ivaSubtotal = ivaTax.TaxSubtotal.FirstOrDefault(st => st.TaxCategory.TaxScheme.ID.Value == "01" || st.TaxCategory.TaxScheme.ID.Value == "02");
                                                                                 if(ivaSubtotal != null && ivaSubtotal.TaxAmount != null)
                                                                                 {
                                                                                     valorConIva += ivaSubtotal.TaxAmount.Value;
                                                                                 }
                                                                             }
                                                                         }
                                                                     }
                                                                     @if(valorConIva > 0)
                                                                     {
                                                                         <strong>$@valorConIva.ToString("N2")</strong>
                                                                         @if(!string.IsNullOrEmpty(monedaValorConIva))
                                                                         {
                                                                             <small class="text-muted">@monedaValorConIva</small>
                                                                         }
                                                                     }
                                                                     else
                                                                     {
                                                                         <span class="text-muted">-</span>
                                                                     }
                                                                 </td>
                                                                 <td>
                                                                     @{
                                                                         var otrosImpuestos = new List<string>();
                                                                         
                                                                         if(producto.TaxTotal != null && producto.TaxTotal.Any())
                                                                         {
                                                                             foreach(var taxTotal in producto.TaxTotal)
                                                                             {
                                                                                 if(taxTotal.TaxSubtotal != null && taxTotal.TaxSubtotal.Any())
                                                                                 {
                                                                                     foreach(var taxSubtotal in taxTotal.TaxSubtotal)
                                                                                     {
                                                                                         var taxSchemeId = taxSubtotal.TaxCategory?.TaxScheme?.ID?.Value;
                                                                                         if(!string.IsNullOrEmpty(taxSchemeId) && taxSchemeId != "01" && taxSchemeId != "02")
                                                                                         {
                                                                                             // Obtener nombre del impuesto
                                                                                             string taxName = "";
                                                                                             if (taxSubtotal.TaxCategory?.TaxScheme?.Name?.Value != null)
                                                                                             {
                                                                                                 taxName = taxSubtotal.TaxCategory.TaxScheme.Name.Value;
                                                                                             }
                                                                                             else
                                                                                             {
                                                                                                 taxName = taxSchemeId switch
                                                                                                 {
                                                                                                     "03" => "INC",
                                                                                                     "04" => "Bolsa",
                                                                                                     "05" => "Impoconsumo",
                                                                                                     "06" => "Licores",
                                                                                                     "07" => "Cigarrillos",
                                                                                                     "08" => "Retención",
                                                                                                     "09" => "Recargo",
                                                                                                     _ => $"Impuesto {taxSchemeId}"
                                                                                                 };
                                                                                             }
                                                                                             
                                                                                             // Determinar el tipo de valor del impuesto
                                                                                             string impuestoValue = "";
                                                                                             if (taxSubtotal.Percent != null)
                                                                                             {
                                                                                                 impuestoValue = $"{taxSubtotal.Percent.Value.ToString("N0")}%";
                                                                                             }
                                                                                             else if (taxSubtotal.PerUnitAmount != null && taxSubtotal.BaseUnitMeasure != null)
                                                                                             {
                                                                                                 impuestoValue = $"{taxSubtotal.PerUnitAmount.Value.ToString("N2")} / {taxSubtotal.BaseUnitMeasure.unitCode}";
                                                                                             }
                                                                                             else if (taxSubtotal.TaxAmount != null)
                                                                                             {
                                                                                                 impuestoValue = taxSubtotal.TaxAmount.Value.ToString("N2");
                                                                                             }
                                                                                             
                                                                                             if (!string.IsNullOrEmpty(taxName) && !string.IsNullOrEmpty(impuestoValue))
                                                                                             {
                                                                                                 otrosImpuestos.Add($"{taxName} {impuestoValue}");
                                                                                             }
                                                                                         }
                                                                                     }
                                                                                 }
                                                                             }
                                                                         }
                                                                     }
                                                                                                                                           @if(otrosImpuestos.Any())
                                                                      {
                                                                          <div class="impuestos-container">
                                                                              @foreach(var impuesto in otrosImpuestos)
                                                                              {
                                                                                  <div class="impuesto-item">
                                                                                      <span class="impuesto-icon">◆</span>
                                                                                      <span class="impuesto-text">@impuesto</span>
                                                                                  </div>
                                                                              }
                                                                          </div>
                                                                      }
                                                                      else
                                                                      {
                                                                          <span class="text-muted">-</span>
                                                                      }
                                                                 </td>
                                                                 <td class="text-end">
                                                                    @{
                                                                        decimal valorTotal = 0;
                                                                        string monedaTotal = "";
                                                                        
                                                                        // Base: LineExtensionAmount (sin impuestos)
                                                                        if(producto.LineExtensionAmount != null)
                                                                        {
                                                                            valorTotal += producto.LineExtensionAmount.Value;
                                                                            monedaTotal = producto.LineExtensionAmount.currencyID;
                                                                        }
                                                                        
                                                                        // Sumar todos los impuestos
                                                                        if(producto.TaxTotal != null && producto.TaxTotal.Any())
                                                                        {
                                                                            foreach(var taxTotal in producto.TaxTotal)
                                                                            {
                                                                                if(taxTotal.TaxSubtotal != null && taxTotal.TaxSubtotal.Any())
                                                                                {
                                                                                    foreach(var taxSubtotal in taxTotal.TaxSubtotal)
                                                                                    {
                                                                                        if(taxSubtotal.TaxAmount != null)
                                                                                        {
                                                                                            valorTotal += taxSubtotal.TaxAmount.Value;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    @if(valorTotal > 0)
                                                                    {
                                                                        <strong>$@valorTotal.ToString("N2")</strong>
                                                                        @if(!string.IsNullOrEmpty(monedaTotal))
                                                                        {
                                                                            <small class="text-muted">@monedaTotal</small>
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="text-muted">-</span>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

<!-- Modal para visualizar archivos -->
<div class="modal fade" id="archivoModal" tabindex="-1" aria-labelledby="archivoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="archivoModalLabel">Visualizar Archivo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="archivoContent" class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="btnNuevaPestana">Abrir en Nueva Pestaña</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
                 // Función para validar productos
         function validarProductos(facturaIndex, facturaId) {
             // Mostrar indicador de carga
             const boton = event.target.closest('button');
             const iconoOriginal = boton.innerHTML;
             boton.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Validando...';
             boton.disabled = true;

             // Obtener todos los SKUs de la factura
             const skus = [];
             const tablaProductos = document.querySelector(`#productsCollapse${facturaId} tbody`);
             
             if (!tablaProductos) {
                 mostrarNotificacion('Error: No se encontró la tabla de productos', 'error');
                 boton.innerHTML = iconoOriginal;
                 boton.disabled = false;
                 return;
             }
             
             const filasProductos = tablaProductos.querySelectorAll('tr');
            
            filasProductos.forEach(fila => {
                const inputSku = fila.querySelector('.sku-input');
                if (inputSku) {
                    skus.push(inputSku.value.trim());
                }
            });

            if (skus.length === 0) {
                mostrarNotificacion('No se encontraron productos para validar', 'warning');
                boton.innerHTML = iconoOriginal;
                boton.disabled = false;
                return;
            }

            // Realizar la validación mediante AJAX
            fetch('/Facturas/ValidarProductos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    facturaIndex: facturaIndex,
                    skus: skus
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error en la validación');
                }
                return response.json();
            })
            .then(data => {
                // Actualizar la interfaz con los resultados
                actualizarValidacionProductos(facturaIndex, data.validaciones, facturaId);
                mostrarNotificacion(`Validación completada. ${data.validaciones.filter(v => v.existeEnBaseDeDatos).length} de ${data.validaciones.length} productos encontrados.`, 'success');
            })
            .catch(error => {
                console.error('Error:', error);
                mostrarNotificacion('Error al validar productos: ' + error.message, 'error');
            })
            .finally(() => {
                // Restaurar el botón
                boton.innerHTML = iconoOriginal;
                boton.disabled = false;
            });
        }

                                   // Función para actualizar la interfaz con los resultados de validación
          function actualizarValidacionProductos(facturaIndex, validaciones, facturaId) {
              const tablaProductos = document.querySelector(`#productsCollapse${facturaId} tbody`);
              
              if (!tablaProductos) {
                  console.error('No se encontró la tabla de productos para actualizar');
                  return;
              }
              
              const filasProductos = tablaProductos.querySelectorAll('tr');
             
             filasProductos.forEach((fila, index) => {
                 const inputSku = fila.querySelector('.sku-input');
                 if (inputSku) {
                     const sku = inputSku.value.trim();
                     const validacion = validaciones.find(v => v.sku === sku);
                     
                     if (validacion) {
                         // Actualizar clases CSS
                         fila.className = validacion.existeEnBaseDeDatos ? '' : 'table-danger';
                         inputSku.className = validacion.existeEnBaseDeDatos ? 'form-control form-control-sm sku-input' : 'form-control form-control-sm sku-input border-danger text-danger';
                         
                         // Actualizar tooltip
                         inputSku.title = validacion.existeEnBaseDeDatos ? 'Producto encontrado en base de datos' : 'Producto NO encontrado en base de datos';
                         
                         // Actualizar mensaje de error
                         const errorMsg = fila.querySelector('.text-danger');
                         if (errorMsg) {
                             errorMsg.textContent = validacion.existeEnBaseDeDatos ? '' : 'No encontrado en BD';
                         }
                         
                                                   // Actualizar información del producto en BD
                          const productoBdInfo = fila.querySelector('.producto-bd-info');
                          
                          if (validacion.existeEnBaseDeDatos && validacion.descripcionProducto) {
                              // Si no existe el elemento, crearlo
                              if (!productoBdInfo) {
                                  const descripcionCell = fila.querySelector('td:nth-child(3) div');
                                  if (descripcionCell) {
                                      const nuevoProductoBdInfo = document.createElement('div');
                                      nuevoProductoBdInfo.className = 'producto-bd-info';
                                      nuevoProductoBdInfo.innerHTML = `
                                          <small class="text-success d-block mt-1">
                                              <i class="fas fa-database me-1"></i>
                                              <strong>BD:</strong> ${validacion.descripcionProducto}
                                          </small>
                                      `;
                                      descripcionCell.appendChild(nuevoProductoBdInfo);
                                  }
                              } else {
                                  // Si existe, actualizar el contenido
                                  productoBdInfo.innerHTML = `
                                      <small class="text-success d-block mt-1">
                                          <i class="fas fa-database me-1"></i>
                                          <strong>BD:</strong> ${validacion.descripcionProducto}
                                      </small>
                                  `;
                                  productoBdInfo.style.display = 'block';
                              }
                          } else {
                              // Ocultar la información si no existe en BD o no tiene descripción
                              if (productoBdInfo) {
                                  productoBdInfo.style.display = 'none';
                              }
                          }
                     }
                 }
             });
         }

         // Función para validar un SKU individual cuando se edita
         function validarSkuIndividual(inputSku) {
             const sku = inputSku.value.trim();
             const fila = inputSku.closest('tr');
             
             if (sku === '') {
                 fila.className = '';
                 inputSku.className = 'form-control form-control-sm sku-input';
                 inputSku.title = 'Ingrese un SKU';
                 const errorMsg = fila.querySelector('.text-danger');
                 if (errorMsg) {
                     errorMsg.textContent = '';
                 }
                 return;
             }
             
             // Simular validación individual (puedes hacer una llamada AJAX aquí si es necesario)
             // Por ahora, solo actualizamos la apariencia
             fila.className = 'table-warning';
             inputSku.className = 'form-control form-control-sm sku-input border-warning';
             inputSku.title = 'SKU modificado - Use "Validar Productos" para verificar';
             
             const errorMsg = fila.querySelector('.text-danger');
             if (errorMsg) {
                 errorMsg.textContent = 'Modificado - Validar';
                 errorMsg.className = 'text-warning d-block mt-1';
             }
         }

        // Función para visualizar archivo en modal
        function visualizarEnModal(index, nombre) {
            const modal = new bootstrap.Modal(document.getElementById('archivoModal'));
            const modalTitle = document.getElementById('archivoModalLabel');
            const modalContent = document.getElementById('archivoContent');
            const btnNuevaPestana = document.getElementById('btnNuevaPestana');
            
            modalTitle.textContent = `Visualizar: ${nombre}`;
            modalContent.innerHTML = '<div class="spinner-border" role="status"><span class="visually-hidden">Cargando...</span></div>';
            
            // Cargar el archivo
            fetch(`/Facturas/ObtenerArchivoAdjunto?index=${index}`)
                .then(response => response.blob())
                .then(blob => {
                    const url = URL.createObjectURL(blob);
                    const extension = nombre.split('.').pop().toLowerCase();
                    
                    let content = '';
                    if (extension === 'pdf') {
                        content = `<embed src="${url}" type="application/pdf" width="100%" height="600px">`;
                    } else if (['jpg', 'jpeg', 'png', 'gif'].includes(extension)) {
                        content = `<img src="${url}" class="img-fluid" alt="${nombre}">`;
                    } else {
                        content = `<div class="alert alert-info">Este tipo de archivo no se puede visualizar directamente. <a href="${url}" target="_blank" class="btn btn-primary btn-sm">Descargar</a></div>`;
                    }
                    
                    modalContent.innerHTML = content;
                    btnNuevaPestana.onclick = () => window.open(url, '_blank');
                })
                .catch(error => {
                    modalContent.innerHTML = '<div class="alert alert-danger">Error al cargar el archivo</div>';
                });
            
            modal.show();
        }

        // Función para visualizar archivo en nueva pestaña
        function visualizarEnNuevaPestana(index) {
            window.open(`/Facturas/ObtenerArchivoAdjunto?index=${index}`, '_blank');
        }

        // Función para mostrar notificaciones
        function mostrarNotificacion(mensaje, tipo) {
            const alertClass = tipo === 'error' ? 'alert-danger' : tipo === 'warning' ? 'alert-warning' : 'alert-success';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                    ${mensaje}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;
            
            // Crear contenedor de notificaciones si no existe
            let notificacionesContainer = document.getElementById('notificaciones');
            if (!notificacionesContainer) {
                notificacionesContainer = document.createElement('div');
                notificacionesContainer.id = 'notificaciones';
                notificacionesContainer.style.position = 'fixed';
                notificacionesContainer.style.top = '20px';
                notificacionesContainer.style.right = '20px';
                notificacionesContainer.style.zIndex = '9999';
                document.body.appendChild(notificacionesContainer);
            }
            
            // Agregar notificación
            const alertElement = document.createElement('div');
            alertElement.innerHTML = alertHtml;
            notificacionesContainer.appendChild(alertElement.firstElementChild);
            
            // Auto-remover después de 5 segundos
            setTimeout(() => {
                const alert = notificacionesContainer.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

                 // Ajustar ancho de inputs SKU dinámicamente y manejar eventos
         document.addEventListener('input', function(e) {
             if (e.target.classList.contains('sku-input')) {
                 const canvas = document.createElement('canvas');
                 const context = canvas.getContext('2d');
                 context.font = window.getComputedStyle(e.target).font;
                 const textWidth = context.measureText(e.target.value).width;
                 const minWidth = 80;
                 const maxWidth = 120;
                 const newWidth = Math.max(minWidth, Math.min(maxWidth, textWidth + 20));
                 e.target.style.width = newWidth + 'px';
                 
                 // Validar SKU individual cuando se edita
                 validarSkuIndividual(e.target);
             }
         });

         // Manejar evento Enter en inputs SKU
         document.addEventListener('keydown', function(e) {
             if (e.target.classList.contains('sku-input') && e.key === 'Enter') {
                 e.preventDefault();
                 
                 // Encontrar el botón "Validar Productos" más cercano
                 const facturaCard = e.target.closest('.card');
                 const validarButton = facturaCard.querySelector('button[onclick*="validarProductos"]');
                 
                 if (validarButton) {
                     validarButton.click();
                 }
             }
         });

         // Manejar evento blur (cuando el input pierde el foco)
         document.addEventListener('blur', function(e) {
             if (e.target.classList.contains('sku-input')) {
                 validarSkuIndividual(e.target);
             }
         }, true);

        // Aplicar máscara de moneda a inputs de descuento
        document.addEventListener('input', function(e) {
            if (e.target.classList.contains('discount-input')) {
                let value = e.target.value.replace(/[^\d.,]/g, '');
                value = value.replace(',', '.');
                const numValue = parseFloat(value) || 0;
                e.target.value = numValue.toFixed(2);
                
                // Ajustar ancho dinámicamente
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                context.font = window.getComputedStyle(e.target).font;
                const textWidth = context.measureText(e.target.value).width;
                const minWidth = 60;
                const maxWidth = 80;
                const newWidth = Math.max(minWidth, Math.min(maxWidth, textWidth + 20));
                e.target.style.width = newWidth + 'px';
            }
        });
    </script>
} 